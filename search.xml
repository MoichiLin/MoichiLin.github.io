<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Arch Linux 基础安装</title>
      <link href="/2023/01/24/Arch%20Linux%20%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85/"/>
      <url>/2023/01/24/Arch%20Linux%20%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="本文来源-ArchLinuxStudio"><a href="#本文来源-ArchLinuxStudio" class="headerlink" title="本文来源 ArchLinuxStudio"></a>本文来源 <a href="https://archlinuxstudio.github.io/ArchLinuxTutorial/">ArchLinuxStudio</a></h1><h1 id="Arch-Linux-基础安装"><a href="#Arch-Linux-基础安装" class="headerlink" title="Arch Linux 基础安装"></a>Arch Linux 基础安装</h1><p>本节从安装最基础的无图形化 ArchLinux 系统开始。<a href="https://wiki.archlinux.org/index.php/Installation_guide">官方安装指南</a></p><h2 id="0-禁用-reflector"><a href="#0-禁用-reflector" class="headerlink" title="0.禁用 reflector"></a>0.禁用 reflector</h2><p>reflector 会为你选择速度合适的镜像源，但其结果并不准确，同时会清空配置文件中的内容，对于新人来讲并不适用，我们首先对其进行禁用。</p><pre><code class="Bash">systemctl stop reflector.service</code></pre><h2 id="1-再次确保是否为-UEFI-模式"><a href="#1-再次确保是否为-UEFI-模式" class="headerlink" title="1.再次确保是否为 UEFI 模式"></a>1.再次确保是否为 UEFI 模式</h2><pre><code class="Bash">ls /sys/firmware/efi/efivars</code></pre><h2 id="2-连接网络"><a href="#2-连接网络" class="headerlink" title="2.连接网络"></a>2.连接网络</h2><pre><code class="Bash">rfkill unblock wifi                       #解锁无线网卡iwctl                                     #执行iwctl命令，进入交互式命令行device list                               #列出设备名，比如无线网卡看到叫 wlan0station wlan0 scan                        #扫描网络station wlan0 get-networks                #列出网络 比如想连接YOUR-WIRELESS-NAME这个无线station wlan0 connect YOUR-WIRELESS-NAME  #进行连接 输入密码即可exit                                      #成功后exit退出</code></pre><h2 id="3-更新系统时钟"><a href="#3-更新系统时钟" class="headerlink" title="3.更新系统时钟"></a>3.更新系统时钟</h2><pre><code class="Bash">timedatectl set-ntp true    #将系统时间与网络时间进行同步timedatectl status          #检查服务状态</code></pre><h2 id="4-分区"><a href="#4-分区" class="headerlink" title="4.分区"></a>4.分区</h2><p>首先将磁盘转换为 gpt 类型</p><pre><code class="Bash">lsblk                       #显示分区情况 找到你想安装的磁盘名称parted /dev/nvme0n1         #执行parted，进入交互式命令行，进行磁盘类型变更(parted)mktable             #输入mktableNew disk label type? gpt    #输入gpt 将磁盘类型转换为gpt 如磁盘有数据会警告，输入yes即可quit                        #最后quit退出parted命令行交互</code></pre><p>使用 cfdisk 命令对磁盘分区</p><pre><code class="Bash">cfdisk /dev/sdx #来执行分区操作,分配各个分区大小，类型fdisk -l #分区结束后， 复查磁盘情况</code></pre><h2 id="5-格式化"><a href="#5-格式化" class="headerlink" title="5.格式化"></a>5.格式化</h2><pre><code class="Bash">mkfs.ext4  /dev/nvme0n1p2            #格式化根目录和home目录的两个分区mkfs.vfat  /dev/nvme0n1p1            #格式化efi分区</code></pre><h2 id="6-挂载"><a href="#6-挂载" class="headerlink" title="6.挂载"></a>6.挂载</h2><p>在挂载时，挂载是有顺序的，先挂载根分区，再挂载 EFI 分区</p><pre><code class="Bash">mount /dev/nvme0n1p2  /mntmkdir /mnt/efi     #创建efi目录mkdir /mnt/home    #创建home目录mount /dev/nvme0n1p1 /mnt/efimount /dev/sda1 /mnt/home</code></pre><h2 id="7-镜像源的选择"><a href="#7-镜像源的选择" class="headerlink" title="7.镜像源的选择"></a>7.镜像源的选择</h2><p>编辑镜像源，删除所有中国源，将台湾，日本，新加坡的提前</p><pre><code class="Bash">vim /etc/pacman.d/mirrorlist</code></pre><h2 id="8-安装系统"><a href="#8-安装系统" class="headerlink" title="8.安装系统"></a>8.安装系统</h2><pre><code class="Bash">pacstrap /mnt base base-devel linux-zen linux-zen-headers linux-firmware    #base-devel在AUR包的安装是必须的pacstrap /mnt dhcpcd iwd vim bash-completion zsh networkmanager                           #一个有线所需(iwd也需要dhcpcd) 一个无线所需 一个编辑器 一个补全工具</code></pre><h2 id="9-生成-fstab-文件"><a href="#9-生成-fstab-文件" class="headerlink" title="9.生成 fstab 文件"></a>9.生成 fstab 文件</h2><p>fstab 用来定义磁盘分区</p><pre><code class="Bash">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></pre><h2 id="10-change-root"><a href="#10-change-root" class="headerlink" title="10.change root"></a>10.change root</h2><pre><code class="Bash">arch-chroot /mnt</code></pre><h2 id="11-时区设置"><a href="#11-时区设置" class="headerlink" title="11.时区设置"></a>11.时区设置</h2><p>设置时区，在 /etc/localtime 下用/usr 中合适的时区创建符号连接。如下设置上海时区。</p><pre><code class="Bash">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></pre><p>随后进行硬件时间设置，将当前的正确 UTC 时间写入硬件时间。</p><pre><code class="Bash">hwclock --systohc</code></pre><h2 id="12-设置-Locale-进行本地化"><a href="#12-设置-Locale-进行本地化" class="headerlink" title="12.设置 Locale 进行本地化"></a>12.设置 Locale 进行本地化</h2><pre><code class="Bash">vim /etc/locale.gen   #en_US.UTF-8 所在行以及 zh_CN.UTF-8 所在行的注释符号（#）locale-gen</code></pre><p>向 <code>/etc/locale.conf</code> 导入内容</p><pre><code class="Bash">echo 'LANG=en_US.UTF-8' &gt; /etc/locale.conf</code></pre><h2 id="13-设置主机名"><a href="#13-设置主机名" class="headerlink" title="13.设置主机名"></a>13.设置主机名</h2><pre><code class="Bash">vim /etc/hostname     #加入你想为主机取的主机名</code></pre><p>接下来在/etc/hosts设置与其匹配的条目。</p><pre><code class="Bash">vim /etc/hosts</code></pre><p>加入如下内容</p><pre><code class="Bash">127.0.0.1   localhost::1         localhost127.0.1.1   archname</code></pre><h2 id="14-为-root-用户设置密码"><a href="#14-为-root-用户设置密码" class="headerlink" title="14.为 root 用户设置密码"></a>14.为 root 用户设置密码</h2><pre><code class="Bash">passwd root</code></pre><h2 id="15-安装微码"><a href="#15-安装微码" class="headerlink" title="15.安装微码"></a>15.安装微码</h2><pre><code class="Bash">pacman -S intel-ucode   #Intelpacman -S amd-ucode     #AMD</code></pre><h2 id="16-安装引导程序"><a href="#16-安装引导程序" class="headerlink" title="16.安装引导程序"></a>16.安装引导程序</h2><pre><code class="Bash">pacman -S grub efibootmgr   #grub是启动引导器，efibootmgr被 grub 脚本用来将启动项写入 NVRAM。grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB</code></pre><p>接下来编辑/etc/default/grub 文件，去掉GRUB_CMDLINE_LINUX_DEFAULT一行中最后的 quiet 参数，同时把 log level 的数值从 3 改成 5。这样是为了后续如果出现系统错误，方便排错。同时在同一行加入 nowatchdog 参数，这可以显著提高开关机速度。</p><pre><code class="Bash">vim /etc/default/grub</code></pre><p>最后生成 GRUB 所需的配置文件</p><pre><code class="Bash">grub-mkconfig -o /boot/grub/grub.cfg</code></pre><h2 id="17-完成安装"><a href="#17-完成安装" class="headerlink" title="17.完成安装"></a>17.完成安装</h2><pre><code class="Bash">exit                # 退回安装环境#umount -R  /mnt     # 卸载新分区reboot              # 重启</code></pre><p>重启后，开启 dhcp 服务，即可连接网络</p><pre><code class="Bash">systemctl enable --now dhcpcd  #立即启动dhcp</code></pre><p>若为无线链接，则还需要启动 iwd 才可以使用 iwctl 连接网络</p><pre><code class="Bash">systemctl start iwd #立即启动iwdiwctl               #和之前的方式一样，连接无线网络</code></pre><h2 id="18-准备非-root-用户"><a href="#18-准备非-root-用户" class="headerlink" title="18.准备非 root 用户"></a>18.准备非 root 用户</h2><pre><code class="Bash">useradd -m -G wheel -s /bin/zsh testuser  #wheel附加组可sudo，以root用户执行命令 -m同时创建用户家目录</code></pre><p>设置新用户 testuser 的密码</p><pre><code class="Bash">passwd testuser</code></pre><p>编辑 sudoers 配置文件</p><pre><code class="Bash">EDITOR=vim visudo  # 需要以 root 用户运行 visudo 命令</code></pre><p>找到下面这样的一行，把前面的注释符号 # 去掉，:wq 保存并退出即可。</p><pre><code class="Bash">#%wheel ALL=(ALL) ALL</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/24/hello-world/"/>
      <url>/2023/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
